{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _JS = require('../JS');\n\nvar _JS2 = _interopRequireDefault(_JS);\n\nvar _logger = require('../logger');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _Subscriber = require('./Subscriber');\n\nvar _Subscriber2 = _interopRequireDefault(_Subscriber);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar logger = new _logger2.default('Channel');\nvar default_options = {\n  bufferSize: 128\n};\n\nvar Channel = function () {\n  function Channel(name, options) {\n    _classCallCheck(this, Channel);\n\n    this.name = name;\n    this._options = Object.assign({}, default_options, options);\n    this.clear();\n  }\n\n  _createClass(Channel, [{\n    key: 'subscribe',\n    value: function subscribe(noticeHandler) {\n      var found = this.subscribers.filter(function (subscriber) {\n        return subscriber.noticeHandler === noticeHandler;\n      });\n\n      if (found.length > 0) {\n        logger.debug('duplicated subscription on channel ' + this.name, noticeHandler);\n        return;\n      }\n\n      var subscriber = new _Subscriber2.default(this, noticeHandler);\n      this.subscribers.push(subscriber);\n      subscriber.notify();\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe(noticeHandler) {\n      this.subscribers = this.subscribers.filter(function (subscriber) {\n        return subscriber.noticeHandler !== noticeHandler;\n      });\n    }\n  }, {\n    key: 'send',\n    value: function send(event) {\n      if (!event) {\n        logger.warn('nothing to send to channel ' + this.name);\n      }\n\n      var size = this._options.bufferSize;\n      this.cursor++;\n      var idx = this.cursor % size;\n\n      if (idx < this.events.length) {\n        this.events[idx] = event;\n      } else {\n        this.events.push(event);\n      }\n\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber.notify();\n      });\n    }\n  }, {\n    key: 'poll',\n    value: function poll(last_cursor) {\n      if (_JS2.default.isUndefined(last_cursor)) {\n        last_cursor = -1;\n      }\n\n      if (last_cursor === this.cursor) {\n        return [];\n      }\n\n      var list = [];\n      var size = this._options.bufferSize;\n\n      for (var i = last_cursor + 1; i <= this.cursor; i++) {\n        var idx = i % size;\n\n        if (idx >= this.events.length) {\n          logger.error('idx overflow');\n          break;\n        }\n\n        list.push(this.events[idx]);\n      }\n\n      return list;\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.events = [];\n      this.subscribers = [];\n      this.cursor = -1;\n    }\n  }]);\n\n  return Channel;\n}();\n\nexports.default = Channel;","map":null,"metadata":{},"sourceType":"script"}