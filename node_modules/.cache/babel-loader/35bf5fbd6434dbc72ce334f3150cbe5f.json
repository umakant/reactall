{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _logger = require('../logger');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _Channel = require('./Channel');\n\nvar _Channel2 = _interopRequireDefault(_Channel);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar logger = new _logger2.default('Pipe');\nvar default_options = {\n  bufferSize: 128\n};\nvar CHANNEL_BROADCAST = '_broadcast_';\n\nvar Pipe = function () {\n  function Pipe(name, options) {\n    _classCallCheck(this, Pipe);\n\n    this.name = name;\n    this._options = Object.assign({}, default_options, options);\n    this.channels = {};\n  }\n\n  _createClass(Pipe, [{\n    key: 'send',\n    value: function send(event, channel_name) {\n      if (!channel_name) {\n        channel_name = event.channel;\n      }\n\n      if (!channel_name) {\n        channel_name = CHANNEL_BROADCAST;\n      }\n\n      var channel = this._getChannel(channel_name);\n\n      channel.send(event);\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(noticeHandler, channel_name) {\n      var _this = this;\n\n      if (!channel_name) {\n        channel_name = CHANNEL_BROADCAST;\n      }\n\n      var names = [].concat(channel_name);\n      names.forEach(function (name) {\n        var channel = _this._getChannel(name);\n\n        channel.subscribe(noticeHandler);\n      });\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      var _this2 = this;\n\n      Object.keys(this.channels).map(function (name) {\n        return _this2.channels[name];\n      }).forEach(function (channel) {\n        return channel.clear();\n      });\n    }\n  }, {\n    key: '_getChannel',\n    value: function _getChannel(name) {\n      if (!name) {\n        return null;\n      }\n\n      var channel = this.channels[name];\n\n      if (!channel) {\n        channel = new _Channel2.default(name);\n        this.channels[name] = channel;\n      }\n\n      return channel;\n    }\n  }]);\n\n  return Pipe;\n}();\n\nexports.default = Pipe;","map":null,"metadata":{},"sourceType":"script"}