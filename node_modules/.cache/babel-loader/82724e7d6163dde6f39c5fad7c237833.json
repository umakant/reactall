{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Device = require('../Device');\n\nvar _Device2 = _interopRequireDefault(_Device);\n\nvar _logger = require('../logger');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar logger = new _logger2.default('SSO.Google');\nvar default_options = {\n  google_client_id: null,\n  script: 'https://apis.google.com/js/platform.js',\n  scope: 'profile email openid'\n  /**\n  * Reference: https://developers.google.com/identity/sign-in/web/reference\n  */\n\n};\n\nvar Google = function () {\n  function Google(options) {\n    _classCallCheck(this, Google);\n\n    if (typeof options === 'string') {\n      options = {\n        google_client_id: options\n      };\n    }\n\n    this._options = Object.assign({}, default_options, options);\n\n    if (!this._options.google_client_id) {\n      logger.warn('missing google_client_id');\n    }\n\n    this.signIn = this.signIn.bind(this);\n    this.signOut = this.signOut.bind(this);\n    this.check = this.check.bind(this);\n    this.ready = this.ready.bind(this);\n    this._initGapi = this._initGapi.bind(this);\n    this._user = this._user.bind(this);\n    this._ga = null;\n\n    this._createScript();\n  }\n\n  _createClass(Google, [{\n    key: 'signIn',\n    value: function signIn() {\n      var _this = this;\n\n      if (!this._ga) {\n        return Promise.reject('no ga instance');\n      }\n\n      return this._ga.signIn().then(function (googleUser) {\n        return _this._user(googleUser);\n      });\n    }\n  }, {\n    key: 'signOut',\n    value: function signOut() {\n      if (!this._ga) {\n        return Promise.reject('no ga instance');\n      }\n\n      return this._ga.signOut();\n    }\n  }, {\n    key: 'check',\n    value: function check() {\n      var _this2 = this;\n\n      if (!this._ga) {\n        return Promise.reject('no ga instance');\n      }\n\n      return new Promise(function (resolve, reject) {\n        var googleUser = _this2._ga.currentUser.get();\n\n        if (!googleUser) {\n          reject('no google user');\n          return;\n        }\n\n        if (googleUser.isSignedIn()) {\n          resolve(_this2._user(googleUser));\n        } else {\n          reject('not signed in');\n        }\n      });\n    }\n  }, {\n    key: 'ready',\n    value: function ready() {\n      var google_client_id = this._options.google_client_id;\n\n      if (!google_client_id) {\n        return Promise.reject('missing google_client_id in options');\n      }\n\n      var that = this;\n      return new Promise(function (resolve, reject) {\n        var checkCount = 0;\n\n        var checkGA = function checkGA() {\n          checkCount++;\n\n          if (that._ga) {\n            resolve();\n            return;\n          }\n\n          if (window.gapi) {\n            that._initGapi();\n\n            return;\n          }\n\n          if (checkCount < 5) {\n            window.setTimeout(checkGA, 500);\n          } else {\n            reject('timeout');\n          }\n        };\n\n        checkGA();\n      });\n    }\n  }, {\n    key: '_user',\n    value: function _user(googleUser) {\n      var _googleUser$getAuthRe = googleUser.getAuthResponse(),\n          id_token = _googleUser$getAuthRe.id_token;\n\n      var profile = googleUser.getBasicProfile();\n      return {\n        id_token: id_token,\n        email: profile.getEmail(),\n        name: profile.getName()\n      };\n    }\n  }, {\n    key: '_createScript',\n    value: function _createScript() {\n      if (window.gapi) {\n        this._initGapi();\n\n        return;\n      }\n\n      var script = this._options.script;\n\n      if (script === 'none') {\n        return;\n      }\n\n      var src = this._options.script;\n\n      _Device2.default.createScript(src, true, this._initGapi);\n    }\n  }, {\n    key: '_initGapi',\n    value: function _initGapi() {\n      logger.debug('init gapi');\n      var _options = this._options,\n          google_client_id = _options.google_client_id,\n          scope = _options.scope;\n\n      if (!google_client_id) {\n        logger.warn('missing google_client_id in options');\n        return;\n      }\n\n      var that = this;\n      var g = window.gapi;\n      g.load('auth2', function () {\n        g.auth2.init({\n          client_id: google_client_id,\n          scope: scope\n        }).then(function (ga) {\n          that._ga = ga;\n        });\n      });\n    }\n  }]);\n\n  return Google;\n}();\n\nexports.default = Google;","map":null,"metadata":{},"sourceType":"script"}