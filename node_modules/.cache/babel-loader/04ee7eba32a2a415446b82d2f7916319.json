{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _JS = require('../JS');\n\nvar _JS2 = _interopRequireDefault(_JS);\n\nvar _logger = require('../logger');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar logger = new _logger2.default('LocalStorage');\nvar defaultOptions = {\n  prefix: '_fsts_',\n  expiration: '3600' // seconds\n\n};\n\nvar LocalStorage = function () {\n  function LocalStorage(options) {\n    _classCallCheck(this, LocalStorage);\n\n    logger.debug('creating LocalStorage instance', options);\n    this._options = Object.assign({}, defaultOptions, options);\n  }\n\n  _createClass(LocalStorage, [{\n    key: 'options',\n    value: function options(_options) {\n      if (_options) {\n        this._options = Object.assign({}, this._options, _options);\n      }\n\n      return this._options;\n    }\n  }, {\n    key: 'key',\n    value: function key(_key) {\n      return this._options.prefix + _key;\n    }\n  }, {\n    key: 'set',\n    value: function set(key, value) {\n      if (!key) {\n        logger.warn('no key to set');\n        return;\n      }\n\n      if (_JS2.default.isUndefined(value) || value === null) {\n        logger.worn('nothing to set for ' + key);\n        return;\n      }\n\n      var item = {\n        data: JSON.stringify(value),\n        ts: _JS2.default.ts()\n      };\n\n      this._setItem(key, item);\n    }\n  }, {\n    key: 'get',\n    value: function get(key) {\n      if (!key) {\n        logger.warn('no key to get');\n        return;\n      }\n\n      var item = this._getItem(key);\n\n      if (!item) {\n        logger.verbose('cache miss: ' + key);\n        return null;\n      }\n\n      if (this._isExpired(item)) {\n        logger.verbose('cache miss: ' + key);\n        return null;\n      }\n\n      logger.verbose('cache hit: ' + key);\n      return JSON.parse(item.data);\n    }\n  }, {\n    key: 'remove',\n    value: function remove(key) {\n      if (!key) {\n        logger.warn('no key to remove');\n        return;\n      }\n\n      this._removeItem(key);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      var store = window.localStorage;\n\n      while (store.length > 0) {\n        var key = store.key(0);\n        store.removeItem(key);\n      }\n    }\n  }, {\n    key: 'purgeExpired',\n    value: function purgeExpired() {\n      var store = window.localStorage;\n\n      while (store.length > 0) {\n        var key = store.key(0);\n        var item = JSON.parse(store.getItem(key));\n\n        if (this._isExpired(item)) {\n          store.removeItem(key);\n        }\n      }\n    }\n  }, {\n    key: '_setItem',\n    value: function _setItem(key, item) {\n      window.localStorage.setItem(this.key(key), JSON.stringify(item));\n    }\n  }, {\n    key: '_getItem',\n    value: function _getItem(key) {\n      var item = window.localStorage.getItem(this.key(key));\n\n      if (!item) {\n        return null;\n      }\n\n      var it = JSON.parse(item);\n      return {\n        data: it.data,\n        ts: it.ts * 1\n      };\n    }\n  }, {\n    key: '_removeItem',\n    value: function _removeItem(key) {\n      window.localStorge.removeItem(this.key(key));\n    }\n  }, {\n    key: '_isExpired',\n    value: function _isExpired(item) {\n      var cur = _JS2.default.ts();\n\n      return item.ts + this._options.expiration * 1000 < cur;\n    }\n  }]);\n\n  return LocalStorage;\n}();\n\nexports.default = LocalStorage;","map":null,"metadata":{},"sourceType":"script"}