{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _JS = require('../JS');\n\nvar _JS2 = _interopRequireDefault(_JS);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\n\nvar ConsoleLogger = function () {\n  function ConsoleLogger(name) {\n    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'WARN';\n\n    _classCallCheck(this, ConsoleLogger);\n\n    this.name = name;\n    this.level = level;\n  }\n\n  _createClass(ConsoleLogger, [{\n    key: '_ts',\n    value: function _ts() {\n      var dt = new Date();\n      return [_JS2.default.padNumber(dt.getMinutes(), 2), _JS2.default.padNumber(dt.getSeconds(), 2)].join(':') + '.' + dt.getMilliseconds();\n    }\n  }, {\n    key: '_key',\n    value: function _key(type, msg) {\n      var parts = ['[' + type + ']', this._ts(), this.name];\n\n      if (msg) {\n        parts = parts.concat(['-', msg]);\n      }\n\n      return parts.join(' ');\n    }\n  }, {\n    key: '_log',\n    value: function _log(type) {\n      var level_name = this.level;\n\n      if (ConsoleLogger.LOG_LEVEL) {\n        level_name = ConsoleLogger.LOG_LEVEL;\n      }\n\n      if (typeof window != 'undefined' && window.LOG_LEVEL) {\n        level_name = window.LOG_LEVEL;\n      }\n\n      var logger_level = LOG_LEVELS[level_name];\n      var type_level = LOG_LEVELS[type];\n\n      if (!(type_level >= logger_level)) {\n        return;\n      }\n\n      var log = console.log;\n\n      if (type === 'ERROR' && console.error) {\n        log = console.error;\n      }\n\n      if (type === 'WARN' && console.warn) {\n        log = console.warn;\n      }\n\n      for (var _len = arguments.length, msg = Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        msg[_key2 - 1] = arguments[_key2];\n      }\n\n      if (msg.length === 1 && typeof msg[0] === 'string') {\n        log(this._key(type, msg[0]));\n      } else if (msg.length === 1) {\n        var output = {};\n\n        var key = this._key(type);\n\n        output[key] = msg[0];\n        log(output);\n      } else if (typeof msg[0] === 'string') {\n        var obj = msg.slice(1);\n\n        if (obj.length === 1) {\n          obj = obj[0];\n        }\n\n        var _output = {};\n\n        var _key3 = this._key(type, msg[0]);\n\n        _output[_key3] = obj;\n        log(_output);\n      } else {\n        var _output2 = {};\n\n        var _key4 = this._key(type);\n\n        _output2[_key4] = msg;\n        log(_output2);\n      }\n    }\n  }, {\n    key: 'log',\n    value: function log() {\n      for (var _len2 = arguments.length, msg = Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        msg[_key5] = arguments[_key5];\n      }\n\n      this._log.apply(this, ['INFO'].concat(msg));\n    }\n  }, {\n    key: 'info',\n    value: function info() {\n      for (var _len3 = arguments.length, msg = Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        msg[_key6] = arguments[_key6];\n      }\n\n      this._log.apply(this, ['INFO'].concat(msg));\n    }\n  }, {\n    key: 'warn',\n    value: function warn() {\n      for (var _len4 = arguments.length, msg = Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        msg[_key7] = arguments[_key7];\n      }\n\n      this._log.apply(this, ['WARN'].concat(msg));\n    }\n  }, {\n    key: 'error',\n    value: function error() {\n      for (var _len5 = arguments.length, msg = Array(_len5), _key8 = 0; _key8 < _len5; _key8++) {\n        msg[_key8] = arguments[_key8];\n      }\n\n      this._log.apply(this, ['ERROR'].concat(msg));\n    }\n  }, {\n    key: 'debug',\n    value: function debug() {\n      for (var _len6 = arguments.length, msg = Array(_len6), _key9 = 0; _key9 < _len6; _key9++) {\n        msg[_key9] = arguments[_key9];\n      }\n\n      this._log.apply(this, ['DEBUG'].concat(msg));\n    }\n  }, {\n    key: 'verbose',\n    value: function verbose() {\n      for (var _len7 = arguments.length, msg = Array(_len7), _key10 = 0; _key10 < _len7; _key10++) {\n        msg[_key10] = arguments[_key10];\n      }\n\n      this._log.apply(this, ['VERBOSE'].concat(msg));\n    }\n  }]);\n\n  return ConsoleLogger;\n}();\n\nexports.default = ConsoleLogger;\n;","map":null,"metadata":{},"sourceType":"script"}